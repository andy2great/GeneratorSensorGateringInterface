{"version":3,"sources":["constants/senseurs.constants.ts","constants/server.constants.ts","components/summary/summary.service.ts","components/summary/summary.component.js","components/details/details.component.js","components/module-content/module-content.component.js","App.js","index.js"],"names":["SENSEURS_TYPE","SERVER_NAME","process","summaryService","getLastValue","fetch","then","res","json","getGlobalChartValues","getSensorInfo","type","sensorInfo","name","symbole","MOD_PERATION","TEMPERATURE","HUMIDITE","CO","LPG","Summary","props","useState","ipToSend","setIpToSend","tableData","setTableData","chartData","setChartData","chartOptions","setChartOptions","chartType","setChartType","useEffect","refreshData","refreshChart","rows","Set","map","data","location","forEach","row","modeOpr","temp","hum","co","lpg","autre","temps","NaN","filter","x","time","Date","timestamp","getHours","getMinutes","getSeconds","senseurInfo","senseur","val","push","minY","maxY","minX","maxX","_id","y","getTime","chart","zoomType","title","text","xAxis","max","min","yAxis","plotOptions","series","turboThreshold","className","Button","css","color","variant","onClick","height","selectable","showRowHover","columns","key","label","showCheckboxes","onCellClick","column","event","handler","showFooterToolbar","highcharts","Highcharts","options","onChange","e","target","value","catch","Details","ModuleContent","module","setModule","handleModuleClick","setOptions","timezoneOffset","getTimezoneOffset","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6df14345.chunk.js","sourcesContent":["export enum SENSEURS_TYPE {\r\n  MOD_PERATION = 0,\r\n  TEMPERATURE = 1,\r\n  HUMIDITE = 2,\r\n  CO = 3,\r\n  LPG = 4,\r\n  DECIBEL = 5,\r\n  COURANT = 6,\r\n  VIBRATION = 7,\r\n}\r\n","\r\nexport const SERVER_PORT = 59595;\r\nexport const SERVER_NAME = process.env.REACT_APP_API_ENDPOINT;","import { SENSEURS_TYPE } from \"../../constants/senseurs.constants\";\r\nimport { SERVER_NAME } from \"../../constants/server.constants\";\r\n\r\nconst summaryService = {\r\n  getLastValue: () => {\r\n    return fetch(SERVER_NAME + \"/senseurs/last\").then((res) => res.json());\r\n  },\r\n\r\n  getGlobalChartValues: () => {\r\n    return fetch(SERVER_NAME + \"/senseurs/chart\").then((res) => res.json());\r\n  },\r\n\r\n  getSensorInfo: (type: number) => {\r\n    const sensorInfo = {\r\n      name: \"\",\r\n      type: \"\",\r\n      symbole: \"\",\r\n    };\r\n\r\n    switch (type) {\r\n      case SENSEURS_TYPE.MOD_PERATION:\r\n        sensorInfo.name = \"Mode Operation\";\r\n        sensorInfo.type = \"modeOpr\";\r\n        sensorInfo.symbole = \"\";\r\n        break;\r\n      case SENSEURS_TYPE.TEMPERATURE:\r\n        sensorInfo.name = \"Température\";\r\n        sensorInfo.type = \"temp\";\r\n        sensorInfo.symbole = \"°C\";\r\n        break;\r\n      case SENSEURS_TYPE.HUMIDITE:\r\n        sensorInfo.name = \"Humidité\";\r\n        sensorInfo.type = \"hum\";\r\n        sensorInfo.symbole = \"%\";\r\n        break;\r\n      case SENSEURS_TYPE.CO:\r\n        sensorInfo.name = \"CO\";\r\n        sensorInfo.type = \"co\";\r\n        sensorInfo.symbole = \"PPM\";\r\n        break;\r\n      case SENSEURS_TYPE.LPG:\r\n        sensorInfo.name = \"Propane\";\r\n        sensorInfo.type = \"lpg\";\r\n        sensorInfo.symbole = \"PPM\";\r\n        break;\r\n      default:\r\n        sensorInfo.name = \"Not Found\";\r\n        sensorInfo.type = \"autre\";\r\n        sensorInfo.symbole = \"\";\r\n    }\r\n\r\n    return sensorInfo;\r\n  },\r\n};\r\n\r\nexport default summaryService;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nimport { DataTables } from \"material-ui-datatables\";\r\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport summaryService from \"./summary.service\";\r\nimport { SENSEURS_TYPE } from \"../../constants/senseurs.constants\";\r\n\r\nimport \"./summary.style.css\";\r\n\r\nexport const Summary = (props) => {\r\n  const [ipToSend, setIpToSend] = useState(\"\");\r\n  const [tableData, setTableData] = useState([]);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [chartOptions, setChartOptions] = useState({});\r\n  const [chartType, setChartType] = useState(SENSEURS_TYPE.TEMPERATURE);\r\n\r\n  // Similar to componentDidMount and componentDidUpdate:\r\n  useEffect(() => {\r\n    refreshData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    refreshChart();\r\n  }, [chartData, chartType]);\r\n\r\n  const refreshData = () => {\r\n    summaryService.getLastValue().then((res) => {\r\n      const rows = [];\r\n      const locations = new Set(\r\n        res.map((data) => {\r\n          return data.location;\r\n        })\r\n      );\r\n\r\n      locations.forEach((location) => {\r\n        const row = {\r\n          location: location,\r\n          modeOpr: \"NaN\",\r\n          temp: \"NaN\",\r\n          hum: \"NaN\",\r\n          co: \"NaN\",\r\n          lpg: \"NaN\",\r\n          autre: true,\r\n          temps: NaN,\r\n        };\r\n\r\n        const senseurs = res.filter((x) => {\r\n          return x.location === location;\r\n        });\r\n\r\n        senseurs.forEach((x) => {\r\n          const time = new Date(x.timestamp);\r\n          row.temps =\r\n            !row.temps &&\r\n            `${time.getHours()}:${time.getMinutes()}:${time.getSeconds()}`;\r\n\r\n          const senseurInfo = summaryService.getSensorInfo(x.senseur);\r\n          row[`${senseurInfo.type}`] = x.val;\r\n        });\r\n\r\n        rows.push(row);\r\n      });\r\n      setTableData(rows);\r\n    });\r\n\r\n    summaryService.getGlobalChartValues().then((res) => {\r\n      setChartData(res);\r\n      refreshChart();\r\n    });\r\n  };\r\n\r\n  const refreshChart = () => {\r\n    let minY = 0;\r\n    let maxY = 0;\r\n    let minX = 0;\r\n    let maxX = 0;\r\n    const senseurInfo = summaryService.getSensorInfo(chartType);\r\n\r\n    const data = chartData\r\n      .filter((x) => x._id.senseur === chartType)\r\n      .map((x) => ({\r\n        name: x._id.location,\r\n        data: x.val.map((y) => {\r\n          const time = new Date(y.timestamp).getTime();\r\n\r\n          if (!minY || minY > y.val) minY = y.val;\r\n          if (!maxY || maxY < y.val) maxY = y.val;\r\n          if (!minX || minX > time) minX = time;\r\n          if (!maxX || maxX < time) maxX = time;\r\n\r\n          return {\r\n            x: time,\r\n            y: y.val,\r\n          };\r\n        }),\r\n      }));\r\n\r\n    setChartOptions({\r\n      chart: {\r\n        type: \"line\",\r\n        zoomType: \"x\",\r\n      },\r\n      title: {\r\n        text: senseurInfo.name,\r\n      },\r\n      xAxis: {\r\n        type: \"datetime\",\r\n        max: maxX + 20000000,\r\n        min: minX - 10000000,\r\n      },\r\n      yAxis: {\r\n        min: minY - 10,\r\n        max: maxY + 10,\r\n        title: {\r\n          text: `${senseurInfo.name} ${\r\n            senseurInfo.symbole ? \"(\" + senseurInfo.symbole + \")\" : \"\"\r\n          }`,\r\n        },\r\n      },\r\n      plotOptions: {\r\n        series: {\r\n          turboThreshold: 0,\r\n        },\r\n      },\r\n      series: data.map((x) => ({\r\n        name: x.name,\r\n        data: x.data,\r\n      })),\r\n    });\r\n  };\r\n\r\n  const handleCellClick = (row, column, event) => {\r\n    if (column === 0) {\r\n      props.handler(event);\r\n    }\r\n    setChartType(column - 1);\r\n  };\r\n\r\n  const TABLE_COLUMNS = [\r\n    {\r\n      key: \"location\",\r\n      label: \"Module\",\r\n    },\r\n    {\r\n      key: \"modeOpr\",\r\n      label: \"Act.\",\r\n    },\r\n    {\r\n      key: \"temp\",\r\n      label: \"Temp\",\r\n    },\r\n    {\r\n      key: \"hum\",\r\n      label: \"Hum\",\r\n    },\r\n    {\r\n      key: \"co\",\r\n      label: \"CO\",\r\n    },\r\n    {\r\n      key: \"lpg\",\r\n      label: \"LPG\",\r\n    },\r\n    {\r\n      key: \"autre\",\r\n      label: \"Autre\",\r\n    },\r\n    {\r\n      key: \"temps\",\r\n      label: \"Temps\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"summary-content\">\r\n      <p className=\"summary-title\">Sommaire</p>\r\n      <Button\r\n        css=\"button\"\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        onClick={() => refreshData()}\r\n      >\r\n        Rafraichir\r\n      </Button>\r\n      <div className=\"summary-info\">\r\n        <MuiThemeProvider>\r\n          <DataTables\r\n            height={\"auto\"}\r\n            selectable={false}\r\n            showRowHover={true}\r\n            columns={TABLE_COLUMNS}\r\n            data={tableData}\r\n            showCheckboxes={false}\r\n            onCellClick={handleCellClick}\r\n            showFooterToolbar={false}\r\n          />\r\n        </MuiThemeProvider>\r\n        <HighchartsReact highcharts={Highcharts} options={chartOptions} />\r\n        <input onChange={(e) => setIpToSend(e.target.value)}></input>\r\n        <Button\r\n          onClick={() => {\r\n            fetch(\"http://\" + ipToSend).catch((e) => {});\r\n          }}\r\n        >\r\n          Poke MPP\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import \"./details.style.css\";\r\n\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nexport const Details = (props) => {\r\n  return (\r\n    <div className=\"parent\">\r\n      <Button\r\n        css=\"button\"\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        onClick={() => props.handler(null)}\r\n      >\r\n        Retour\r\n      </Button>\r\n      allo papa\r\n      <div className=\"enfant\">comment ca va</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Summary } from \"../summary/summary.component\";\r\nimport { Details } from \"../details/details.component\";\r\n\r\nexport const ModuleContent = () => {\r\n  const [module, setModule] = useState();\r\n\r\n  const handleModuleClick = (module) => {\r\n    setModule(module);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {module ? (\r\n        <Details handler={handleModuleClick}></Details>\r\n      ) : (\r\n        <Summary handler={handleModuleClick}></Summary>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { ModuleContent } from \"./components/module-content/module-content.component\";\n\nimport Highcharts from \"highcharts\";\n\nHighcharts.setOptions({\n  time: {\n    timezoneOffset: new Date().getTimezoneOffset(),\n  },\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ModuleContent></ModuleContent>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}